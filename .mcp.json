{
  "mcpVersion": "2024-11-05",
  "name": "web3-interface-mcp",
  "description": "Model Context Protocol configuration for Web3 Interface development",
  "version": "1.0.0",
  "author": "Nibert Investments",
  "homepage": "https://github.com/nibertinvestments/WEB3INTERFACE",
  "license": "MIT",
  "capabilities": {
    "logging": {},
    "prompts": {},
    "resources": {},
    "tools": {}
  },
  "servers": {
    "web3-interface": {
      "command": "npx",
      "args": ["tsx", "mcp-server.ts"],
      "env": {
        "NODE_ENV": "development"
      }
    }
  },
  "prompts": [
    {
      "name": "explain-component",
      "description": "Explain how a React component works in this Web3 interface",
      "arguments": [
        {
          "name": "component_name",
          "description": "Name of the component to explain",
          "required": true
        }
      ]
    },
    {
      "name": "web3-integration",
      "description": "Explain Web3 integration patterns used in this project",
      "arguments": [
        {
          "name": "feature",
          "description": "Specific Web3 feature to explain (wallet, transactions, etc.)",
          "required": false
        }
      ]
    },
    {
      "name": "troubleshoot-issue",
      "description": "Help troubleshoot common issues in Web3 development",
      "arguments": [
        {
          "name": "issue_type",
          "description": "Type of issue (wallet, transaction, ui, etc.)",
          "required": true
        },
        {
          "name": "error_message",
          "description": "Error message or description",
          "required": false
        }
      ]
    },
    {
      "name": "code-review",
      "description": "Review code changes for Web3 best practices",
      "arguments": [
        {
          "name": "file_path",
          "description": "Path to the file being reviewed",
          "required": true
        },
        {
          "name": "change_type",
          "description": "Type of change (feature, bugfix, refactor, etc.)",
          "required": false
        }
      ]
    }
  ],
  "resources": [
    {
      "uri": "file://src/**/*.tsx",
      "name": "React Components",
      "description": "All React component files in the project",
      "mimeType": "text/typescript"
    },
    {
      "uri": "file://src/**/*.ts",
      "name": "TypeScript Files",
      "description": "All TypeScript files including hooks, utils, and types",
      "mimeType": "text/typescript"
    },
    {
      "uri": "file://docs/**/*.md",
      "name": "Documentation",
      "description": "Project documentation files",
      "mimeType": "text/markdown"
    },
    {
      "uri": "file://package.json",
      "name": "Package Configuration",
      "description": "Project dependencies and scripts configuration",
      "mimeType": "application/json"
    },
    {
      "uri": "file://src/config/index.ts",
      "name": "Application Configuration",
      "description": "Application configuration including network settings",
      "mimeType": "text/typescript"
    }
  ],
  "tools": [
    {
      "name": "run-tests",
      "description": "Run the test suite with optional filters",
      "inputSchema": {
        "type": "object",
        "properties": {
          "testPattern": {
            "type": "string",
            "description": "Pattern to filter tests"
          },
          "coverage": {
            "type": "boolean",
            "description": "Whether to generate coverage report"
          }
        }
      }
    },
    {
      "name": "lint-code",
      "description": "Run ESLint to check code quality",
      "inputSchema": {
        "type": "object",
        "properties": {
          "fix": {
            "type": "boolean",
            "description": "Whether to automatically fix issues"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific files to lint"
          }
        }
      }
    },
    {
      "name": "format-code",
      "description": "Format code using Prettier",
      "inputSchema": {
        "type": "object",
        "properties": {
          "check": {
            "type": "boolean",
            "description": "Whether to check formatting without changing files"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific files to format"
          }
        }
      }
    },
    {
      "name": "type-check",
      "description": "Run TypeScript type checking",
      "inputSchema": {
        "type": "object",
        "properties": {
          "watch": {
            "type": "boolean",
            "description": "Whether to run in watch mode"
          }
        }
      }
    },
    {
      "name": "build-project",
      "description": "Build the project for production",
      "inputSchema": {
        "type": "object",
        "properties": {
          "analyze": {
            "type": "boolean",
            "description": "Whether to analyze bundle size"
          }
        }
      }
    },
    {
      "name": "start-dev",
      "description": "Start the development server",
      "inputSchema": {
        "type": "object",
        "properties": {
          "port": {
            "type": "number",
            "description": "Port to run the server on"
          },
          "host": {
            "type": "string",
            "description": "Host to bind the server to"
          }
        }
      }
    }
  ],
  "experimentalFeatures": {
    "codeGeneration": true,
    "webSearch": false,
    "imageAnalysis": false
  },
  "context": {
    "projectType": "web3-frontend",
    "framework": "react",
    "language": "typescript",
    "styling": "tailwindcss",
    "buildTool": "vite",
    "testRunner": "vitest",
    "web3Libraries": ["ethers", "wagmi", "viem"],
    "deployment": ["vercel", "netlify"],
    "codeStyle": {
      "linter": "eslint",
      "formatter": "prettier",
      "conventions": [
        "functional-components",
        "typescript-strict",
        "hooks-pattern",
        "consistent-naming"
      ]
    },
    "architecture": {
      "pattern": "component-based",
      "stateManagement": "react-hooks",
      "routing": "future-react-router",
      "dataFetching": "future-react-query"
    }
  },
  "guidelines": {
    "coding": [
      "Use TypeScript for all new code",
      "Follow React functional component patterns",
      "Use custom hooks for reusable logic",
      "Implement proper error handling",
      "Write meaningful tests",
      "Follow the established folder structure",
      "Use semantic HTML and accessibility best practices"
    ],
    "web3": [
      "Never store private keys in the application",
      "Always validate user inputs",
      "Handle network switching gracefully",
      "Provide clear transaction status feedback",
      "Implement proper error handling for Web3 operations",
      "Use established Web3 libraries (ethers, wagmi)",
      "Follow security best practices"
    ],
    "performance": [
      "Use React.memo for expensive components",
      "Implement lazy loading for routes",
      "Optimize bundle size with tree shaking",
      "Use proper key props in lists",
      "Avoid unnecessary re-renders",
      "Implement efficient state updates"
    ],
    "accessibility": [
      "Use semantic HTML elements",
      "Provide proper ARIA labels",
      "Ensure keyboard navigation",
      "Maintain sufficient color contrast",
      "Test with screen readers",
      "Support multiple input methods"
    ]
  },
  "commands": {
    "dev": "npm run dev",
    "build": "npm run build",
    "test": "npm run test",
    "lint": "npm run lint",
    "type-check": "npm run type-check",
    "format": "npm run format"
  },
  "documentation": {
    "readme": "README.md",
    "contributing": "CONTRIBUTING.md",
    "architecture": "docs/ARCHITECTURE.md",
    "components": "docs/COMPONENTS.md",
    "api": "docs/API.md"
  }
}